import boto3
import json
import datetime

def get_lambda_details(lambda_name):
    client = boto3.client('lambda')
    response = client.get_function(FunctionName=lambda_name)
    return response

def get_s3_buckets_accessed_by_lambda(lambda_name):
    client = boto3.client('cloudtrail')
    
    end_time = datetime.datetime.utcnow()
    start_time = end_time - datetime.timedelta(days=90)  # Adjust the time range as needed
    
    response = client.lookup_events(
        LookupAttributes=[
            {
                'AttributeKey': 'EventSource',
                'AttributeValue': 'lambda.amazonaws.com'
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        MaxResults=50  # Adjust as needed
    )
    
    buckets = set()
    
    for event in response['Events']:
        event_details = json.loads(event['CloudTrailEvent'])
        if 's3.amazonaws.com' in event_details['eventSource']:
            bucket_name = event_details.get('requestParameters', {}).get('bucketName')
            if bucket_name:
                buckets.add(bucket_name)
    
    return list(buckets)

def find_associated_resources(lambda_name_or_arn):
    lambda_name = lambda_name_or_arn.split(':')[-1]
    lambda_details = get_lambda_details(lambda_name)
    associated_resources = {
        'Lambda': [lambda_details['Configuration']['FunctionArn']],
        'S3': get_s3_buckets_accessed_by_lambda(lambda_name)
    }
    return associated_resources

if __name__ == "__main__":
    lambda_name_or_arn = input("Enter the Lambda function name or ARN: ")
    resources = find_associated_resources(lambda_name_or_arn)
    print(f"Associated resources for Lambda {lambda_name_or_arn}:")
    for resource_type, resource_list in resources.items():
        print(f"{resource_type}:")
        for resource in resource_list:
            print(f"  - {resource}")